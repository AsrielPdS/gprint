"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.end = exports.ph = exports.i = exports.currPF = exports.currPH = exports.st = exports.s = exports.p = exports.timerP = exports.l = exports.cs = exports.tbf = exports.tb = exports.tbh = exports.dateTimeP = exports.symb = exports.block = exports.c = exports.r = exports.th = exports.tr = exports.dateP = exports.numbP = exports.hr = exports.sep = exports.cut = void 0;
// export type DomAlign = "center" | "justify" | "left" | "right" | "start" | "end";
const cut = () => ({ tp: "hr", s: "cut" });
exports.cut = cut;
const sep = () => ({ tp: "hr", s: 'divider' });
exports.sep = sep;
/**
 * horizontal rule
 * @param s style
 */
const hr = (s) => ({ tp: "hr", s });
exports.hr = hr;
function numbP(data, style, fmt = 'n;$', al = "end") {
    return { tp: "p", s: style || undefined, is: { al: al || undefined }, dt: [{ tp: "s", dt: data, fmt: fmt }] };
}
exports.numbP = numbP;
function dateP(data) {
    return { tp: "p", dt: [{ tp: "s", dt: data, fmt: 'd;d' }] };
}
exports.dateP = dateP;
const tr = (...dt) => ({ tp: "tr", dt });
exports.tr = tr;
const th = (hd, ...dt) => ({ tp: "th", hd, dt });
exports.th = th;
/** book row*/
const r = (...dt) => ({ tp: "row", dt });
exports.r = r;
/** book column*/
const c = (...dt) => ({ tp: "col", dt });
exports.c = c;
/** block of paragraphs*/
const block = (...dt) => ({ tp: "col", dt });
exports.block = block;
const symb = (dt) => ({ tp: "symbol", dt });
exports.symb = symb;
function dateTimeP(data) {
    return { tp: "p", dt: [{ tp: "s", dt: data, fmt: 'd;f' }] };
}
exports.dateTimeP = dateTimeP;
const tbh = (cols, hd, ...dt) => ({ tp: "table", cols: cols?.map(c => ({ sz: c })), hd, dt });
exports.tbh = tbh;
const tb = (cols, ...dt) => ({ tp: "table", cols: cols?.map(c => ({ sz: c })), dt });
exports.tb = tb;
/** full table */
const tbf = (cols, hd, dt, ft) => ({ tp: "table", cols: cols?.map(c => ({ sz: c })), hd, dt: Array.isArray(dt) ? dt : [dt], ft });
exports.tbf = tbf;
const cs = (box, is) => Object.assign(box, { is });
exports.cs = cs;
const l = (box, ly) => Object.assign(box, { ly });
exports.l = l;
function timerP(data) {
    return { tp: "p", s: 'number', dt: [{ tp: "s", dt: data, fmt: 'n;t' }] };
}
exports.timerP = timerP;
function p(data, style, al) {
    return { tp: "p", s: style, is: { al: al || undefined }, dt: data && [{ dt: data }] };
}
exports.p = p;
/** scalar */
function s(data, style, fmt, al) {
    return { tp: "p", s: style, is: { al: al || void 0 }, dt: [{ tp: "s", dt: data, fmt: fmt, }] };
}
exports.s = s;
const st = (value, tp, format) => tp == "s" ? s(value, "strong", format) : p(value, "strong");
exports.st = st;
function currPH(data) {
    return { tp: "p", dt: [{ dt: data }], is: { al: "end" } };
}
exports.currPH = currPH;
function currPF(data, format = 'n;$') {
    return { tp: "p", s: 'number', is: { al: "end" }, dt: [{ tp: "s", dt: `pag_sum('${data}', (i)=>i.${data},'${format}')` }] };
}
exports.currPF = currPF;
const i = (dt, w, h) => ({ tp: "img", dt, is: { w, h } });
exports.i = i;
const ph = (val) => ({ tp: "ph", val });
exports.ph = ph;
function end(base, ...ends) {
    let end = (ends.length == 1 && ends[0].tp == "col" ? ends[0] : {
        tp: "col",
        ub: true,
        dt: ends
    });
    (end.ly || (end.ly = {})).sz = 1;
    end.align = "e" /* e */;
    base.push(end);
    return {
        tp: "col",
        sc: "data",
        ly: { fill: true },
        dt: base
    };
}
exports.end = end;
// export function align(align: DomAlign): TAlign {
//   switch (align) {
//     case 'center': return "c";
//     case 'end': return "e";
//     case 'left': return "l";
//     case 'right': return "r";
//     case 'justify': return "j";
//     default: return "s";
//   }
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSxvRkFBb0Y7QUFDN0UsTUFBTSxHQUFHLEdBQUcsR0FBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFBMUMsUUFBQSxHQUFHLE9BQXVDO0FBRWhELE1BQU0sR0FBRyxHQUFHLEdBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQTlDLFFBQUEsR0FBRyxPQUEyQztBQUMzRDs7O0dBR0c7QUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQU8sRUFBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUF6QyxRQUFBLEVBQUUsTUFBdUM7QUFFdEQsU0FBZ0IsS0FBSyxDQUFDLElBQVMsRUFBRSxLQUFXLEVBQUUsR0FBRyxHQUFHLEtBQUssRUFBRSxLQUFhLEtBQUs7SUFDM0UsT0FBTyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ2hILENBQUM7QUFGRCxzQkFFQztBQUNELFNBQWdCLEtBQUssQ0FBQyxJQUFTO0lBQzdCLE9BQU8sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcs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