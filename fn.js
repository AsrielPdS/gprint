"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.end = exports.currPF = exports.currPH = exports.st = exports.s = exports.timerP = exports.l = exports.is = exports.dtP = exports.dateP = exports.numbP = exports.sep = exports.cut = exports.e = exports.p = exports.img = exports.tbf = exports.tb = exports.tbh = exports.ph = exports.c = exports.r = exports.tr = exports.hr = void 0;
const util_js_1 = require("galho/util.js");
const hr = (s) => ({ tp: "hr", s });
exports.hr = hr;
const tr = (...bd) => ({ tp: "tr", bd });
exports.tr = tr;
const r = (...bd) => ({ tp: "row", bd });
exports.r = r;
const c = (...bd) => ({ tp: "col", bd: bd.map(v => (0, util_js_1.isS)(v) ? { bd: v } : v) });
exports.c = c;
const ph = (bd) => ({ tp: "ph", bd });
exports.ph = ph;
const tbh = (cols, hd, ...bd) => ({ tp: "tb", cols, hd, bd });
exports.tbh = tbh;
const tb = (cols, ...bd) => ({ tp: "tb", cols, bd });
exports.tb = tb;
const tbf = (cols, hd, bd, ft) => ({ tp: "tb", cols, hd, bd: Array.isArray(bd) ? bd : [bd], ft });
exports.tbf = tbf;
const img = (bd, w, h) => ({ tp: "img", bd, is: { w, h } });
exports.img = img;
const p = (bd, style, al) => ({ s: style, is: al ? { al } : void 0, bd });
exports.p = p;
const e = (bd, fmt, style, al) => ({ s: style || undefined, is: al && { al }, bd: [{ tp: "e", bd, fmt: fmt || undefined }] });
exports.e = e;
const cut = () => ({ tp: "hr", s: "cut" });
exports.cut = cut;
const sep = () => ({ tp: "hr", s: 'divider' });
exports.sep = sep;
const numbP = (data, style, fmt = 'n;$', al = "e") => ({ s: style || undefined, is: { al: al || undefined }, bd: [{ tp: "e", bd: data, fmt: fmt }] });
exports.numbP = numbP;
const dateP = (data) => ({ bd: [{ tp: "e", bd: data, fmt: 'd;d' }] });
exports.dateP = dateP;
const dtP = (bd) => ({ bd: [{ tp: "e", bd, fmt: 'd;f' }] });
exports.dtP = dtP;
const is = (box, is) => (0, util_js_1.assign)(box, { is });
exports.is = is;
const l = (box, ly) => (0, util_js_1.assign)(box, { ly });
exports.l = l;
function timerP(data) {
    return { s: 'number', bd: [{ tp: "e", bd: data, fmt: 'n;t' }] };
}
exports.timerP = timerP;
function s(data, style, fmt, al) {
    return { s: style, is: { al: al || void 0 }, bd: [{ tp: "e", bd: data, fmt: fmt, }] };
}
exports.s = s;
const st = (value, tp, fmt) => tp == "s" ? s(value, "strong", fmt) : (0, exports.p)(value, "strong");
exports.st = st;
function currPH(data) {
    return { bd: [{ bd: data }], is: { al: "e" } };
}
exports.currPH = currPH;
function currPF(data, format = 'n;$') {
    return { s: 'number', is: { al: "e" }, bd: [{ tp: "e", bd: `pag_sum('${data}', (i)=>i.${data},'${format}')` }] };
}
exports.currPF = currPF;
function end(base, ...ends) {
    let end = (ends.length == 1 && ends[0].tp == "col" ? ends[0] : {
        tp: "col",
        ub: true,
        dt: ends
    });
    (end.ly || (end.ly = {})).sz = 1;
    end.align = "e";
    base.push(end);
    return {
        tp: "col",
        sc: "data",
        ly: { fill: true },
        bd: base
    };
}
exports.end = end;
function tbSize(...cols) {
    let l = cols.length;
    var total = 0;
    for (let i = 0; i < l; i++) {
        let s = cols[i] ||= 100 / l;
        total += (0, util_js_1.isN)(s) ? s : s.sz;
    }
    for (let i = 0; i < l; i++) {
        let c = cols[i], v = ((0, util_js_1.isN)(c) ? c : c.sz) * 100 / total;
        (0, util_js_1.isN)(c) ? (cols[i] = v) : (c.sz = v);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBZ0U7QUFPekQsTUFBTSxFQUFFLEdBQUcsQ0FBVSxDQUFPLEVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBckQsUUFBQSxFQUFFLE1BQW1EO0FBQzNELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFrQixFQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQTdELFFBQUEsRUFBRSxNQUEyRDtBQUluRSxNQUFNLENBQUMsR0FBRyxDQUFjLEdBQUcsRUFBaUIsRUFBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUF4RSxRQUFBLENBQUMsS0FBdUU7QUFFOUUsTUFBTSxDQUFDLEdBQUcsQ0FBYyxHQUFHLEVBQXlCLEVBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBQSxhQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBckgsUUFBQSxDQUFDLEtBQW9IO0FBRTNILE1BQU0sRUFBRSxHQUFHLENBQVUsRUFBTyxFQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQXRELFFBQUEsRUFBRSxNQUFvRDtBQUU1RCxNQUFNLEdBQUcsR0FBRyxDQUFVLElBQWlCLEVBQUUsRUFBTyxFQUFFLEdBQUcsRUFB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